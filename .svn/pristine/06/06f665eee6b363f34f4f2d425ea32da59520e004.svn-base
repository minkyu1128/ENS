package cokr.xit.modules.usermng.service;

import java.security.NoSuchAlgorithmException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;

import cokr.xit.modules.common.code.InternalErrCd;
import cokr.xit.modules.common.exception.InternalException;
import cokr.xit.modules.kkomydoc.model.BulkSendReqDTO;
import cokr.xit.modules.kkomydoc.model.child.Document;
import cokr.xit.modules.kkomydoc.model.child.NotiDocument;
import cokr.xit.modules.kkomydoc.model.child.Property;
import cokr.xit.modules.kkomydoc.model.child.Receiver;
import cokr.xit.modules.nicedici.model.DiCiRespDTO;
import cokr.xit.modules.nicedici.service.NiceDiCiService;
import cokr.xit.modules.usermng.domain.ElctrnNticSndng;
import cokr.xit.modules.usermng.domain.ElctrnNticSndngDetail;
import cokr.xit.modules.usermng.domain.ElctrnNticSndngDetailRepository;
import cokr.xit.modules.usermng.domain.ElctrnNticSndngRepository;
import cokr.xit.modules.usermng.domain.ElctrnNticSndngResultRepository;
import cokr.xit.modules.usermng.domain.NhtTmplatManageRepository;
import cokr.xit.modules.usermng.service.cmpnt.UserElctrnNticProducer;
import cokr.xit.utils.CmmnUtil;
import cokr.xit.utils.SHA256;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import net.bytebuddy.utility.RandomString;

@Slf4j
@Service
@RequiredArgsConstructor
public class UserElctrnNticService {
	private final ElctrnNticSndngRepository elctrnNticSndngRepository;
	private final ElctrnNticSndngDetailRepository elctrnNticSndngDetailRepository;
	private final ElctrnNticSndngResultRepository elctrnNticSndngResultRepository;
	private final NhtTmplatManageRepository nhtTmplatManageRepository;
	private final NiceDiCiService nicedDiCiService;


	@Autowired
	private UserElctrnNticProducer userElctrnNticProducer;

	/**
	 * 발송
	 */
	public void send() {

		//발송데이터(마스터) 목록 조회 => 처리중인 자료에 대한 처리는...?? //1분 단위로 스케줄 호출해서 발송일시와 요청일시가 일치하는 자료 조회
		List<ElctrnNticSndng> list = elctrnNticSndngRepository.findAllBySndngProcessSttus("01");	//요청(01) 자료 조회
		for(ElctrnNticSndng row : list) {
			//발송상세 목록 조회
			List<ElctrnNticSndngDetail> detailList = elctrnNticSndngDetailRepository.findAllbyElctrnNticSndngId(row.getElctrnNticSndngId());

			//메시지변환
			List<String> jsonStrList = new ArrayList<>();
			try {
				jsonStrList = makeMessage(row, detailList);
			} catch (Exception e) {
				row.setSndngProcessSttus("99");	//오류
				row.setErrorCn(e.getMessage()); //오류내용
				elctrnNticSndngRepository.save(row);
			}

			//발송요청
			for(String jsonStr : jsonStrList) {
				/** #################
				 * 2021.12.23. 박민규.
				 * accessToken과 contractUuid는 DB에서 관리하도록 수정 요함.
				 ################# */
				Map<String, String> m = new HashMap<>();
				m.put("accessToken", "b40d3c623d1011ecbceae6cf4630da62");
				m.put("contractUuid", "CON-b4126c833d1011ecbceae6cf4630da62");
				m.put("jsonStr", jsonStr);
				userElctrnNticProducer.pubBulkSend(CmmnUtil.toJsonString(m));
			}


			//발송상세 update
			elctrnNticSndngDetailRepository.saveAll(detailList);
		}


	}


	/**
	 * 메시지포맷 작성
	 */
	@SuppressWarnings("deprecation")
	private List<String> makeMessage(ElctrnNticSndng sndng, List<ElctrnNticSndngDetail> sndngDetails) throws InternalException {
		List<String> jsonStrList = new ArrayList<>();

		/** #################
		 * 2021.12.23. 박민규.
		 * 알림톡 API 서비스 개발완료 이후
		 * 발송유형코드(SNDNG_TY_CODE) 유형에 따라
		 * if문으로 분기처리 대신 factory 패턴으로 message 변환하도록 적용 요함.
		 ################# */
		List<Document> documents = new ArrayList<>();
		List<NotiDocument> notidocuments = new ArrayList<>();
		SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyyMMddHHmmssSSS");
		String prefixExternalDocumentUuid = String.format("B-%s%s", simpleDateFormat.format(new Date()), RandomString.make(5));
		int seq = 0;
		for(ElctrnNticSndngDetail row : sndngDetails) {

			String siteCode = "GA72";        //하드코딩 적용하였으나, 이용시스템별 적용되어야 함.
			String sitePw = "xit5811807!!";  //하드코딩 적용하였으나, 이용시스템별 적용되어야 함.
			String payload = row.getMainCode();
			String hash = null;
			try {
				if(StringUtils.isEmpty(row.getCnDetail()))
					hash = SHA256.encrypt(row.getCnDetail());
			} catch (NoSuchAlgorithmException e) {
				log.error(String.format("Hash 값 생성에 실패 하였습니다. [%s]. ", row.getCnDetail()), e);
			}

			/* -------------------------------
			 * 발송정보 설정
			 ------------------------------- */
			//	CI 조회
			DiCiRespDTO diciRespDTO = nicedDiCiService.ci(siteCode, sitePw, row.getIhidnum());
			String ci = null;
			if(diciRespDTO.getError_code()==null)
				ci = diciRespDTO.getDici();
			//	메시지작성
			Document document = new Document();
			document.setTitle(sndng.getNhtTmplatManage().getNhtSj()); //제목
			document.setCommon_categories(new String[] {"NOTICE"});   //카테고리
			document.setHash(hash);                                   //해시값
			Receiver receiver = new Receiver();
			if(ci==null) {
				receiver.setPhone_number(null);                       //받는 이-전화번호
				receiver.setName(null);                               //받는 이-이름
				receiver.setBirthday(null);                           //받는 이-생년월일(YYYYMMDD 형식)
				receiver.setIs_required_verify_name(true);            //받는 이-성명 검증 옵션. CI 전송 시 생략 가능
			}else {                                                   //
				receiver.setCi(ci);                                   //받는 이-ci(개인식별번호)
			}
			document.setReceiver(receiver);                           //받는 이
			Property property = new Property();
			String externalDocumentUuid = String.format("%s%09d", prefixExternalDocumentUuid, ++seq);
			row.setExternal_document_uuid(externalDocumentUuid);
			property.setLink(sndng.getNhtTmplatManage().getRedirectUrl());             //특성정보-본인인증 후 사용자에게 보여줄 웹페이지 주소(redirectUrl)
			property.setPayload(payload);                                              //특성정보-이용기관이 생성한 payload 값
			property.setMessage(sndng.getNhtTmplatManage().getNhtCn());                //특성정보-메시지
			property.setCs_number(sndng.getNhtTmplatManage().getCstmrCnterTlphonNo()); //특성정보-고객센터 전화번호
			property.setCs_name(StringUtils.isEmpty(sndng.getNhtTmplatManage().getCstmrCnterNm())?"문의처":sndng.getNhtTmplatManage().getCstmrCnterNm());         //특성정보-고객센터 명
			property.setExternal_document_uuid(externalDocumentUuid);
			document.setProperty(property);                                            //특성정보
			documents.add(document);



			/* -------------------------------
			 * 고지정보 설정
		 	 ------------------------------- */
			if(!StringUtils.isEmpty(row.getElctrnNticSndng())) {	//고지 데이터가 있으면...
				try {
					NotiDocument notiDocument = (NotiDocument) CmmnUtil.jsonStringtoObj(NotiDocument.class, row.getMobilePageCn());
					notiDocument.setPayload(payload);
					notidocuments.add(notiDocument);
				} catch (Exception e) {
//					log.error(String.format("고지정보 변환에 실패 했습니다. [%s]", row.getMobilePageCn()), e);
					throw new InternalException(InternalErrCd.ERR405, String.format("고지정보 변환에 실패 했습니다. [%s]. %s", row.getMobilePageCn(), e.getMessage()));
				}
			}



			if(documents.size()==100) {	//1회 최대발송건수를 만족하면..
				/* -------------------------------
				 * JsonString으로 변환
				 ------------------------------- */
				BulkSendReqDTO bulkSendReqDTO = new BulkSendReqDTO();
				bulkSendReqDTO.setDocuments(documents);
				bulkSendReqDTO.setNotidocuments(notidocuments);
				jsonStrList.add(CmmnUtil.toJsonString(bulkSendReqDTO));
				//초기화
				documents = new ArrayList<>();
				notidocuments = new ArrayList<>();
			}

		}



		/* -------------------------------
		 * JsonString으로 변환
		 ------------------------------- */
		BulkSendReqDTO bulkSendReqDTO = new BulkSendReqDTO();
		bulkSendReqDTO.setDocuments(documents);
		bulkSendReqDTO.setNotidocuments(notidocuments);
		jsonStrList.add(CmmnUtil.toJsonString(bulkSendReqDTO));



		return jsonStrList;
	}





	/**
	 * 예약발송
	 */



	/**
	 * 발송결과 업데이트
	 */

}
